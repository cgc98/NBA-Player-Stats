bulls_data = [
    # DeRozan
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 0, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 0, 0, 0,
     1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1],
    [1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 0, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
     0, 0, 0, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 0, 0, 0,
     -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1,
     -1, 0, 0, 0, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1],
    # Lavine
    [0, 0, 0, -1, 1, 1, 0, 0, -1, 1, -1, 1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 0, 0, 1, -1, 1,
     1,
     1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1],
    [0, 0, 0, -1, 1, 1, 0, 0, 1, 1, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 0, 0, 1, -1,
     -1,
     1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1],
    [0, 0, 0, 1, 1, 1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 0, 0, -1, 1, 1,
     1,
     1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1],
    [0, 0, 0, -1, 1, 1, 0, 0, -1, -1, 1, -1, -1, 1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 0, 0, 1, -1, 1,
     -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1],
    # Vucevic
    [1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1,
     -1, 1, -1, 1, 1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1],
    [-1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1,
     -1, -1, -1, 1, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1],
    [-1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1,
     -1, -1, -1, -1, 1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1],
    [-1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1,
     -1, -1, 1, -1, 1, 1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1],
    # Ball
    # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, -1, 1, -1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, -1, -1,
    #  1,
    #  -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1],
    # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, -1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 1, 1,
    #  -1,
    #  -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1],
    # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, -1, -1, 1, 1, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1,
    #  1,
    #  1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1],
    # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, -1, 1, -1, 0, 0, 0, 0, 0, 1, -1, 1, 1, 1, -1,
    #  -1,
    #  1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1],
    # # Green
    [1, -1, 0, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, -1, 1, -1, -1, 0, 0, 0, 0,
     -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
    [1, 1, 0, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, -1, -1, -1, 0, 0,
     0, 0, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1],
    [-1, -1, 0, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, -1, 1, 1, 0, 0, 0,
     0, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1],
    [1, 1, 0, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 1, -1, 1, 0, 0,
     0, 0, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1],
    # Dosunmu
    [-1, 1, -1, 1, 0, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 0, 0, 0,
     -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 0, -1, -1, 1],
    [1, -1, 1, -1, 0, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 0, 0,
     0, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 0, -1, 1, 1],
    [1, -1, 1, 1, 0, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 0, 0, 0,
     -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, -1],
    [-1, -1, 1, 1, 0, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 0, 0, 0,
     -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 0, -1, -1, 1],
    # White
    [1, 1, -1, 1, -1, 1, 0, 0, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 0, 1, -1, 1, -1, 0, 0, 0,
     0, 0, -1, -1, 1, -1, -1, 1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1,
     0, 0, 0, 0, 0, 1, 1, 1, -1, 1, -1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, -1, -1, -1, 0, 0, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 0,
     0, 0, 0, 0, -1, 1, -1, 1, 1, 1, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, -1, -1, 0, 0, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 0, 0,
     0, 0, 0, -1, -1, 1, -1, -1, 1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
knicks_data = [
    # Randle
    [1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 0, 0, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
     -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1],
    [1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 0, 0, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1,
     -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1],
    [1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1,
     -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1],
    [-1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 0, 0, -1, -1, 1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1],
    # Barrett
    #    [0, 0, 0, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
    #     -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1],
    #    [0, 0, 0, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 1, -1,
    #     -1, -1, 0, 0, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1],
    #    [0, 0, 0, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 0, 0, 0, 0, 0, 0, -1, 1, -1,
    #     -1, 0, 0, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1],
    #    [0, 0, 0, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
    #     -1, 0, 0, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1],
    # Fournier
    [1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 0, 1, -1, 1, -1, 0, -1, 1, -1, 1, 1, 1, -1, -1, -1,
     -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 0, 1, -1, -1, -1, 0, -1, 1, -1, -1, 1, -1, -1, -1,
     -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1],
    [1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 0, 1, 1, -1, 1, 0, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1,
     -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1],
    [1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 0, 1, -1, 1, -1, 0, -1, -1, -1, 1, 1, -1, -1, -1, -1,
     -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1],
    # Burks
    [-1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 0,
     -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1],
    [1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 0, -1,
     -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1],
    [1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 0, 1,
     -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1],
    [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 0,
     -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1],
    # Robinson
    [1, -1, -1, 0, 1, -1, 1, 1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 0, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1,
     1, -1, -1, -1, -1, -1, 0, 0, -1, 1, -1, 1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [1, -1, 1, 0, 1, 1, 1, 1, -1, -1, 0, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 0, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1,
     1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, 0, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1],
    [-1, -1, -1, 0, 1, -1, 1, 1, -1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 1, -1, 1, -1, -1, -1, -1, -1,
     -1, -1, -1, -1, 1, -1, 1, 1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1]
    # Robinson has no threes
]
data = bulls_data
results = []
for i in range(len(data)):
    for j in range(len(data)):
        if j > i:
            matched = 0
            i_plus_nonmatch = 0
            matched_positive = 0
            total = 0
            for k in range(len(data[i])):
                if not (data[i][k] == 0 or data[j][k] == 0):
                    if data[i][k] == data[j][k]:
                        matched = matched + 1
                        if data[i][k] == 1:
                            matched_positive = matched_positive + 1
                    elif data[i][k] == 1:
                        i_plus_nonmatch = i_plus_nonmatch + 1
                    total = total + 1
            percent = matched / total
            strength = 0.0
            if percent < 0.5:
                strength = 1 - percent
            else:
                strength = percent
            percent_unmatched_i = i_plus_nonmatch / (total - matched)
            percent_matched_pos = matched_positive / matched
            results.append(
                [i, j, strength, percent, matched, total, percent_unmatched_i, i_plus_nonmatch,
                 (total - matched), percent_matched_pos, matched_positive, matched])
results.sort(key=lambda x: x[2])
for i in results:
    print(i)
three_results = []

for i in range(len(data)):
    for j in range(len(data)):
        if j > i and (not (i % 4 == 0 and j - i == 3)):
            for k in range(len(data)):
                if k > j and (not (j % 4 == 0 and k - j == 3)) and (not (i % 4 == 0 and k - i == 3)):
                    matched = 0
                    total = 0
                    i_plus = 0
                    for l in range(len(data[i])):
                        if not (data[i][l] == 0 or data[j][l] == 0 or data[k][l] == 0):
                            if data[i][l] == data[j][l] and data[i][l] == data[k][l]:
                                matched = matched + 1
                                if data[i][l] == 1:
                                    i_plus = i_plus + 1
                            total = total + 1
                    percent = matched / total
                    three_results.append([i, j, k, "i=j, i=k", percent, matched, total, i_plus, (matched - i_plus)])
                    matched = 0
                    total = 0
                    i_plus = 0
                    for l in range(len(data[i])):
                        if not (data[i][l] == 0 or data[j][l] == 0 or data[k][l] == 0):
                            if data[i][l] == data[j][l] and (not data[i][l] == data[k][l]):
                                matched = matched + 1
                                if data[i][l] == 1:
                                    i_plus = i_plus + 1
                            total = total + 1
                    percent = matched / total
                    three_results.append([i, j, k, "i=j, i!=k", percent, matched, total, i_plus, (matched - i_plus)])
                    matched = 0
                    total = 0
                    i_plus = 0
                    for l in range(len(data[i])):
                        if not (data[i][l] == 0 or data[j][l] == 0 or data[k][l] == 0):
                            if (not data[i][l] == data[j][l]) and data[i][l] == data[k][l]:
                                matched = matched + 1
                                if data[i][l] == 1:
                                    i_plus = i_plus + 1
                            total = total + 1
                    percent = matched / total
                    three_results.append([i, j, k, "i!=j, i=k", percent, matched, total, i_plus, (matched - i_plus)])
                    matched = 0
                    total = 0
                    i_plus = 0
                    for l in range(len(data[i])):
                        if not (data[i][l] == 0 or data[j][l] == 0 or data[k][l] == 0):
                            if (not data[i][l] == data[j][l]) and (not data[i][l] == data[k][l]):
                                matched = matched + 1
                                if data[i][l] == 1:
                                    i_plus = i_plus + 1
                            total = total + 1
                    percent = matched / total
                    three_results.append([i, j, k, "i!=j, i!=k", percent, matched, total, i_plus, (matched - i_plus)])
three_results.sort(key=lambda x: x[4])
for i in three_results:
    print(i)
